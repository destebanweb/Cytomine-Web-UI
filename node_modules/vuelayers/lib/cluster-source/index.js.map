{"version":3,"file":"index.js","sources":["src/component/cluster-source/builder.js","src/component/cluster-source/source.vue?rollup-plugin-vue=script.js","src/component/cluster-source/source.vue","src/component/cluster-source/index.js"],"sourcesContent":["import Cluster from 'ol/source/Cluster'\nimport { interval } from 'rxjs/observable'\nimport { first, map, skipWhile } from 'rxjs/operators'\nimport { ok } from '../../util/assert'\n\nexport default class Builder {\n  getSource () {\n    return this.source\n  }\n  /**\n   * @param {Vector|undefined} value\n   * @returns {Builder}\n   */\n  setSource (value) {\n    this.source = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setAttributions (value) {\n    this.attributions = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setDistance (value) {\n    this.distance = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setGeometryFunction (value) {\n    this.geometryFunction = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setLogo (value) {\n    this.logo = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setProjection (value) {\n    this.projection = value\n    return this\n  }\n\n  /**\n   * @param value\n   * @returns {Builder}\n   */\n  setWrapX (value) {\n    this.wrapX = value\n    return this\n  }\n\n  /**\n   * @param key\n   * @param value\n   * @return {void}\n   */\n  set (key, value) {\n    this.values || (this.values = {})\n    this.values[key] = value\n  }\n\n  /**\n   * @return {Cluster}\n   */\n  build () {\n    ok(this.source, 'source is provided')\n\n    const source = new Cluster({\n      attributions: this.attributions,\n      distance: this.distance,\n      geometryFunction: this.geometryFunction,\n      logo: this.logo,\n      projection: this.projection,\n      source: this.source,\n      wrapX: this.wrapX,\n    })\n    source.setProperties(this.values)\n\n    return source\n  }\n\n  /**\n   * @return {Promise<Cluster>}\n   */\n  promise () {\n    return interval(100).pipe(\n      skipWhile(() => !this.source),\n      first(),\n      map(::this.build),\n    ).toPromise(Promise)\n  }\n}\n","\nimport sourceContainer from '../../mixin/source-container'\nimport vectorSource from '../../mixin/vector-source'\nimport { createPointGeom, findPointOnSurface } from '../../ol-ext/geom'\nimport mergeDescriptors from '../../util/multi-merge-descriptors'\nimport SourceBuilder from './builder'\n\nconst props = {\n  distance: {\n    type: Number,\n    default: 20,\n  },\n  /**\n   * Geometry function factory\n   * @type {function(): (function(f: ol.Feature): ol.geom.SimpleGeometry|undefined)} geomFuncFactory\n   */\n  geomFuncFactory: {\n    type: Function,\n    default: defaultGeomFuncFactory,\n  },\n}\n\nconst computed = {\n  geomFunc () {\n    return this.geomFuncFactory()\n  },\n}\n\nconst methods = {\n  /**\n   * @return {Promise<ol.source.Cluster>}\n   * @protected\n   */\n  createSource () {\n    // partial setup of ol.source.Cluster with the help of SourceBuilder class\n    /**\n     * @type {SourceBuilder}\n     * @private\n     */\n    this._sourceBuilder = new SourceBuilder()\n      .setAttributions(this.attributions)\n      .setDistance(this.distance)\n      .setGeometryFunction(this.geomFunc)\n      .setLogo(this.logo)\n      .setProjection(this.projection)\n      .setWrapX(this.wrapX)\n\n    return this._sourceBuilder.promise()\n  },\n  /**\n   * @return {Object}\n   * @protected\n   */\n  getServices () {\n    return mergeDescriptors(\n      this::vectorSource.methods.getServices(),\n      this::sourceContainer.methods.getServices(),\n    )\n  },\n  /**\n   * @return {{\n   *     setSource: function(ol.source.Source): void,\n   *     getSource: function(): ol.source.Source\n   *   }|undefined}\n   * @protected\n   */\n  getSourceTarget () {\n    return this._sourceBuilder\n  },\n}\n\nconst watch = {\n  distance (value) {\n    if (this.$source && value !== this.$source.getDistance()) {\n      this.$source.setDistance(value)\n    }\n  },\n}\n\nexport default {\n  name: 'vl-source-cluster',\n  mixins: [vectorSource, sourceContainer],\n  props,\n  computed,\n  methods,\n  watch,\n}\n\n/**\n * @returns {function(f: ol.Feature): ol.geom.SimpleGeometry|undefined}\n */\nfunction defaultGeomFuncFactory () {\n  return function (feature) {\n    const geometry = feature.getGeometry()\n    if (!geometry) return\n\n    let coordinate = findPointOnSurface(geometry)\n    if (coordinate) {\n      return createPointGeom(coordinate)\n    }\n  }\n}\n","<script>\n  import sourceContainer from '../../mixin/source-container'\n  import vectorSource from '../../mixin/vector-source'\n  import { createPointGeom, findPointOnSurface } from '../../ol-ext/geom'\n  import mergeDescriptors from '../../util/multi-merge-descriptors'\n  import SourceBuilder from './builder'\n\n  const props = {\n    distance: {\n      type: Number,\n      default: 20,\n    },\n    /**\n     * Geometry function factory\n     * @type {function(): (function(f: ol.Feature): ol.geom.SimpleGeometry|undefined)} geomFuncFactory\n     */\n    geomFuncFactory: {\n      type: Function,\n      default: defaultGeomFuncFactory,\n    },\n  }\n\n  const computed = {\n    geomFunc () {\n      return this.geomFuncFactory()\n    },\n  }\n\n  const methods = {\n    /**\n     * @return {Promise<ol.source.Cluster>}\n     * @protected\n     */\n    createSource () {\n      // partial setup of ol.source.Cluster with the help of SourceBuilder class\n      /**\n       * @type {SourceBuilder}\n       * @private\n       */\n      this._sourceBuilder = new SourceBuilder()\n        .setAttributions(this.attributions)\n        .setDistance(this.distance)\n        .setGeometryFunction(this.geomFunc)\n        .setLogo(this.logo)\n        .setProjection(this.projection)\n        .setWrapX(this.wrapX)\n\n      return this._sourceBuilder.promise()\n    },\n    /**\n     * @return {Object}\n     * @protected\n     */\n    getServices () {\n      return mergeDescriptors(\n        this::vectorSource.methods.getServices(),\n        this::sourceContainer.methods.getServices(),\n      )\n    },\n    /**\n     * @return {{\n     *     setSource: function(ol.source.Source): void,\n     *     getSource: function(): ol.source.Source\n     *   }|undefined}\n     * @protected\n     */\n    getSourceTarget () {\n      return this._sourceBuilder\n    },\n  }\n\n  const watch = {\n    distance (value) {\n      if (this.$source && value !== this.$source.getDistance()) {\n        this.$source.setDistance(value)\n      }\n    },\n  }\n\n  export default {\n    name: 'vl-source-cluster',\n    mixins: [vectorSource, sourceContainer],\n    props,\n    computed,\n    methods,\n    watch,\n  }\n\n  /**\n   * @returns {function(f: ol.Feature): ol.geom.SimpleGeometry|undefined}\n   */\n  function defaultGeomFuncFactory () {\n    return function (feature) {\n      const geometry = feature.getGeometry()\n      if (!geometry) return\n\n      let coordinate = findPointOnSurface(geometry)\n      if (coordinate) {\n        return createPointGeom(coordinate)\n      }\n    }\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Source from './source.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Source, options)\n\n  Vue.component(Source.name, Source)\n}\n\nexport default plugin\n\nexport {\n  Source,\n  plugin as install,\n}\n"],"names":["Builder","source","value","attributions","distance","geometryFunction","logo","projection","wrapX","key","values","ok","Cluster","setProperties","interval","pipe","skipWhile","first","map","build","toPromise","props","type","Number","default","geomFuncFactory","Function","defaultGeomFuncFactory","computed","geomFunc","methods","createSource","_sourceBuilder","SourceBuilder","setAttributions","setDistance","setGeometryFunction","setLogo","setProjection","setWrapX","promise","getServices","mergeDescriptors","vectorSource","sourceContainer","getSourceTarget","watch","$source","getDistance","name","mixins","feature","geometry","getGeometry","coordinate","findPointOnSurface","createPointGeom","plugin","Vue","options","installed","pick","Source","component"],"mappings":"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"}