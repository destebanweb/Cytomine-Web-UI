{"version":3,"file":"index.js","sources":["src/component/wmts-source/source.vue?rollup-plugin-vue=script.js","src/component/wmts-source/source.vue","src/component/wmts-source/index.js"],"sourcesContent":["\nimport WMTSSource from 'ol/source/WMTS'\nimport WMTSTileGrid from 'ol/tilegrid/WMTS'\nimport tileSource from '../../mixin/tile-source'\nimport { EXTENT_CORNER, WMTS_FORMAT, WMTS_REQUEST_ENCODING, WMTS_VERSION } from '../../ol-ext/consts'\nimport { createExtentFromProjection, getExtentCorner } from '../../ol-ext/extent'\nimport { resolutionsFromExtent } from '../../ol-ext/tile-grid'\nimport { hasView } from '../../util/assert'\nimport { range } from '../../util/minilo'\n\nconst props = {\n  dimensions: Object,\n  format: {\n    type: String,\n    default: WMTS_FORMAT,\n  },\n  layerName: {\n    type: String,\n    required: true,\n  },\n  matrixSet: {\n    type: String,\n    required: true,\n  },\n  requestEncoding: {\n    type: String,\n    default: WMTS_REQUEST_ENCODING,\n  },\n  styleName: {\n    type: String,\n    required: true,\n  },\n  version: {\n    type: String,\n    default: WMTS_VERSION,\n  },\n  url: {\n    type: String,\n    required: true,\n  },\n  origin: {\n    type: Array,\n  },\n  resolutions: {\n    type: Array,\n  },\n}\n\nconst methods = {\n  /**\n   * @returns {WMTS}\n   * @protected\n   */\n  createSource () {\n    return new WMTSSource({\n      attributions: this.attributions,\n      cacheSize: this.cacheSize,\n      crossOrigin: this.crossOrigin,\n      dimensions: this.dimensions,\n      format: this.format,\n      layer: this.layerName,\n      logo: this.logo,\n      matrixSet: this.matrixSet,\n      origin: this.origin,\n      projection: this.projection,\n      reprojectionErrorThreshold: this.reprojectionErrorThreshold,\n      requestEncoding: this.requestEncoding,\n      resolutions: this.resolutions,\n      tileGrid: this._tileGrid,\n      tilePixelRatio: this.tilePixelRatio,\n      style: this.styleName,\n      version: this.version,\n      url: this.urlTmpl,\n      wrapX: this.wrapX,\n      transition: this.transition,\n      tileLoadFunction: this.tileLoadFunction,\n    })\n  },\n  /**\n   * @return {WMTS}\n   * @protected\n   */\n  createTileGrid () {\n    hasView(this)\n\n    var extent = createExtentFromProjection(this.$view.getProjection())\n    var resolutions = this.resolutions ? this.resolutions : resolutionsFromExtent(extent, this.maxZoom, this.tileSize)\n    var origin = this.origin ? this.origin : getExtentCorner(extent, EXTENT_CORNER.TOP_LEFT)\n\n    return new WMTSTileGrid({\n      extent: extent,\n      origin: origin,\n      resolutions: resolutions,\n      tileSize: this.tileSize,\n      minZoom: this.minZoom,\n      matrixIds: Array.from(range(this.minZoom, resolutions.length)),\n    })\n  },\n}\n\nexport default {\n  name: 'vl-source-wmts',\n  mixins: [tileSource],\n  props,\n  methods,\n}\n","<script>\n  import WMTSSource from 'ol/source/WMTS'\n  import WMTSTileGrid from 'ol/tilegrid/WMTS'\n  import tileSource from '../../mixin/tile-source'\n  import { EXTENT_CORNER, WMTS_FORMAT, WMTS_REQUEST_ENCODING, WMTS_VERSION } from '../../ol-ext/consts'\n  import { createExtentFromProjection, getExtentCorner } from '../../ol-ext/extent'\n  import { resolutionsFromExtent } from '../../ol-ext/tile-grid'\n  import { hasView } from '../../util/assert'\n  import { range } from '../../util/minilo'\n\n  const props = {\n    dimensions: Object,\n    format: {\n      type: String,\n      default: WMTS_FORMAT,\n    },\n    layerName: {\n      type: String,\n      required: true,\n    },\n    matrixSet: {\n      type: String,\n      required: true,\n    },\n    requestEncoding: {\n      type: String,\n      default: WMTS_REQUEST_ENCODING,\n    },\n    styleName: {\n      type: String,\n      required: true,\n    },\n    version: {\n      type: String,\n      default: WMTS_VERSION,\n    },\n    url: {\n      type: String,\n      required: true,\n    },\n    origin: {\n      type: Array,\n    },\n    resolutions: {\n      type: Array,\n    },\n  }\n\n  const methods = {\n    /**\n     * @returns {WMTS}\n     * @protected\n     */\n    createSource () {\n      return new WMTSSource({\n        attributions: this.attributions,\n        cacheSize: this.cacheSize,\n        crossOrigin: this.crossOrigin,\n        dimensions: this.dimensions,\n        format: this.format,\n        layer: this.layerName,\n        logo: this.logo,\n        matrixSet: this.matrixSet,\n        origin: this.origin,\n        projection: this.projection,\n        reprojectionErrorThreshold: this.reprojectionErrorThreshold,\n        requestEncoding: this.requestEncoding,\n        resolutions: this.resolutions,\n        tileGrid: this._tileGrid,\n        tilePixelRatio: this.tilePixelRatio,\n        style: this.styleName,\n        version: this.version,\n        url: this.urlTmpl,\n        wrapX: this.wrapX,\n        transition: this.transition,\n        tileLoadFunction: this.tileLoadFunction,\n      })\n    },\n    /**\n     * @return {WMTS}\n     * @protected\n     */\n    createTileGrid () {\n      hasView(this)\n\n      var extent = createExtentFromProjection(this.$view.getProjection())\n      var resolutions = this.resolutions ? this.resolutions : resolutionsFromExtent(extent, this.maxZoom, this.tileSize)\n      var origin = this.origin ? this.origin : getExtentCorner(extent, EXTENT_CORNER.TOP_LEFT)\n\n      return new WMTSTileGrid({\n        extent: extent,\n        origin: origin,\n        resolutions: resolutions,\n        tileSize: this.tileSize,\n        minZoom: this.minZoom,\n        matrixIds: Array.from(range(this.minZoom, resolutions.length)),\n      })\n    },\n  }\n\n  export default {\n    name: 'vl-source-wmts',\n    mixins: [tileSource],\n    props,\n    methods,\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Source from './source.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Source, options)\n\n  Vue.component(Source.name, Source)\n}\n\nexport default plugin\n\nexport {\n  Source,\n  plugin as install,\n}\n"],"names":["props","dimensions","Object","format","type","String","default","WMTS_FORMAT","layerName","required","matrixSet","requestEncoding","WMTS_REQUEST_ENCODING","styleName","version","WMTS_VERSION","url","origin","Array","resolutions","methods","createSource","WMTSSource","attributions","cacheSize","crossOrigin","layer","logo","projection","reprojectionErrorThreshold","tileGrid","_tileGrid","tilePixelRatio","style","urlTmpl","wrapX","transition","tileLoadFunction","createTileGrid","hasView","extent","createExtentFromProjection","$view","getProjection","resolutionsFromExtent","maxZoom","tileSize","getExtentCorner","EXTENT_CORNER","TOP_LEFT","WMTSTileGrid","minZoom","matrixIds","range","length","name","mixins","tileSource","plugin","Vue","options","installed","pick","Source","component"],"mappings":"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"}