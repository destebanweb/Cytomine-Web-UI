{"version":3,"file":"format.js","sources":["src/ol-ext/format.js"],"sourcesContent":["import BaseGeoJSON from 'ol/format/GeoJSON'\nimport MVT from 'ol/format/MVT'\nimport TopoJSON from 'ol/format/TopoJSON'\nimport { isEmpty } from '../util/minilo'\nimport { EPSG_4326 } from './consts'\nimport { createCircularPolygon } from './geom'\nimport { transformPoint } from './proj'\nimport { isCircle } from './util'\n\n/**\n * @param {Object} [options]\n * @return {GeoJSON}\n */\nexport function createGeoJsonFmt (options) {\n  return new GeoJSON(options)\n}\n\n/**\n * @param {Object} [options]\n * @return {TopoJSON}\n */\nexport function createTopoJsonFmt (options) {\n  return new TopoJSON(options)\n}\n\n/**\n * @param [options]\n * @return {MVT}\n */\nexport function createMvtFmt (options) {\n  return new MVT(options)\n}\n\nclass GeoJSON extends BaseGeoJSON {\n  writeGeometryObject (geometry, options) {\n    if (isCircle(geometry)) {\n      geometry = createCircularPolygon(\n        transformPoint(\n          geometry.getCenter(),\n          options.featureProjection || this.defaultFeatureProjection,\n          EPSG_4326,\n        ),\n        geometry.getRadius(),\n      )\n      options.featureProjection = EPSG_4326\n    }\n    return super.writeGeometryObject(geometry, options)\n  }\n\n  writeFeatureObject (feature, options) {\n    const object = /** @type {Object} */ ({\n      'type': 'Feature',\n    })\n    const id = feature.getId()\n    if (id !== undefined) {\n      object.id = id\n    }\n    const geometry = feature.getGeometry()\n    if (geometry) {\n      object.geometry = this.writeGeometryObject(geometry, options)\n    } else {\n      object.geometry = null\n    }\n    const properties = feature.getProperties()\n    delete properties[feature.getGeometryName()]\n    if (!isEmpty(properties)) {\n      object.properties = properties\n    } else {\n      object.properties = null\n    }\n    return object\n  }\n}\n"],"names":["createGeoJsonFmt","options","GeoJSON","createTopoJsonFmt","TopoJSON","createMvtFmt","MVT","geometry","isCircle","createCircularPolygon","transformPoint","getCenter","featureProjection","defaultFeatureProjection","EPSG_4326","getRadius","feature","object","id","getId","undefined","getGeometry","writeGeometryObject","properties","getProperties","getGeometryName","isEmpty","BaseGeoJSON"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;AAIA,AAAO,SAASA,gBAAT,CAA2BC,OAA3B,EAAoC;SAClC,IAAIC,OAAJ,CAAYD,OAAZ,CAAP;;;;;;;AAOF,AAAO,SAASE,iBAAT,CAA4BF,OAA5B,EAAqC;SACnC,IAAIG,QAAJ,CAAaH,OAAb,CAAP;;;;;;;AAOF,AAAO,SAASI,YAAT,CAAuBJ,OAAvB,EAAgC;SAC9B,IAAIK,GAAJ,CAAQL,OAAR,CAAP;;;IAGIC;;;;;;;;;;;;;wCACiBK,UAAUN,SAAS;UAClCO,QAAQ,CAACD,QAAD,CAAZ,EAAwB;QACtBA,QAAQ,GAAGE,qBAAqB,CAC9BC,cAAc,CACZH,QAAQ,CAACI,SAAT,EADY,EAEZV,OAAO,CAACW,iBAAR,IAA6B,KAAKC,wBAFtB,EAGZC,SAHY,CADgB,EAM9BP,QAAQ,CAACQ,SAAT,EAN8B,CAAhC;QAQAd,OAAO,CAACW,iBAAR,GAA4BE,SAA5B;;;8FAE+BP,QAAjC,EAA2CN,OAA3C;;;;uCAGkBe,SAASf,SAAS;UAC9BgB,MAAM;;;gBACF;OADV;UAGMC,EAAE,GAAGF,OAAO,CAACG,KAAR,EAAX;;UACID,EAAE,KAAKE,SAAX,EAAsB;QACpBH,MAAM,CAACC,EAAP,GAAYA,EAAZ;;;UAEIX,QAAQ,GAAGS,OAAO,CAACK,WAAR,EAAjB;;UACId,QAAJ,EAAc;QACZU,MAAM,CAACV,QAAP,GAAkB,KAAKe,mBAAL,CAAyBf,QAAzB,EAAmCN,OAAnC,CAAlB;OADF,MAEO;QACLgB,MAAM,CAACV,QAAP,GAAkB,IAAlB;;;UAEIgB,UAAU,GAAGP,OAAO,CAACQ,aAAR,EAAnB;aACOD,UAAU,CAACP,OAAO,CAACS,eAAR,EAAD,CAAjB;;UACI,CAACC,OAAO,CAACH,UAAD,CAAZ,EAA0B;QACxBN,MAAM,CAACM,UAAP,GAAoBA,UAApB;OADF,MAEO;QACLN,MAAM,CAACM,UAAP,GAAoB,IAApB;;;aAEKN,MAAP;;;;;EArCkBU;;;;"}