{"version":3,"file":"geometry.js","sources":["src/mixin/geometry.js"],"sourcesContent":["import { distinctUntilChanged, map as mapObs, throttleTime } from 'rxjs/operators'\nimport { boundingExtent } from '../ol-ext/extent'\nimport { findPointOnSurface } from '../ol-ext/geom'\nimport { transforms } from '../ol-ext/proj'\nimport observableFromOlEvent from '../rx-ext/from-ol-event'\nimport { hasGeometry } from '../util/assert'\nimport { isEqual } from '../util/minilo'\nimport mergeDescriptors from '../util/multi-merge-descriptors'\nimport cmp from './ol-virt-cmp'\nimport projTransforms from './proj-transforms'\nimport useMapCmp from './use-map-cmp'\n\nconst props = {\n  /**\n   * Coordinates in the map view projection.\n   * @type {number[]|Coordinate}\n   */\n  coordinates: {\n    type: Array,\n    required: true,\n    validator: val => val.length,\n  },\n}\n\nconst computed = {\n  /**\n   * @type {string}\n   * @abstract\n   * @readonly\n   */\n  type () {\n    throw new Error('Not implemented computed property')\n  },\n  /**\n   * @type {number[]|Extent|undefined}\n   */\n  extent () {\n    if (this.extentViewProj && this.resolvedDataProjection) {\n      return this.extentToDataProj(this.extentViewProj)\n    }\n  },\n  /**\n   * @type {number[]|Extent|undefined}\n   */\n  extentViewProj () {\n    if (this.rev && this.$geometry) {\n      return this.$geometry.getExtent()\n    }\n  },\n  /**\n   * @type {number[]|Coordinate|undefined}\n   */\n  point () {\n    if (this.pointViewProj && this.resolvedDataProjection) {\n      return this.pointToDataProj(this.pointViewProj)\n    }\n  },\n  /**\n   * @type {Array<number>}\n   */\n  pointViewProj () {\n    if (this.rev && this.$geometry) {\n      return findPointOnSurface(this.$geometry)\n    }\n  },\n  /**\n   * @type {Array|undefined}\n   */\n  coordinatesViewProj () {\n    if (this.rev && this.$geometry) {\n      return this.$geometry.getCoordinates()\n    }\n  },\n}\n\nconst methods = {\n  /**\n   * @return {Geometry|Promise<Geometry>}\n   * @protected\n   */\n  createOlObject () {\n    return this.createGeometry()\n  },\n  /**\n   * @return {Geometry|Promise<Geometry>}\n   * @protected\n   * @abstract\n   */\n  createGeometry () {\n    throw new Error('Not implemented method')\n  },\n  /**\n   * @return {Coordinate}\n   */\n  getCoordinates () {\n    hasGeometry(this)\n    return this.toDataProj(this.$geometry.getCoordinates())\n  },\n  /**\n   * @param {Coordinate} coordinates\n   */\n  setCoordinates (coordinates) {\n    hasGeometry(this)\n    this.$geometry.setCoordinates(this.toViewProj(coordinates))\n  },\n  /**\n   * @return {Promise}\n   * @throws {AssertionError}\n   * @protected\n   */\n  init () {\n    this.setupTransformFunctions()\n\n    return this::cmp.methods.init()\n  },\n  /**\n   * @protected\n   */\n  setupTransformFunctions () {\n    // define helper methods based on geometry type\n    const { transform } = transforms[this.type]\n    /**\n     * @method\n     * @param {Array} coordinates\n     * @return {number[]}\n     * @protected\n     */\n    this.toDataProj = coordinates => transform(coordinates, this.viewProjection, this.resolvedDataProjection)\n    /**\n     * @method\n     * @param {Array} coordinates\n     * @return {number[]}\n     * @protected\n     */\n    this.toViewProj = coordinates => transform(coordinates, this.resolvedDataProjection, this.viewProjection)\n  },\n  /**\n   * @return {void|Promise<void>}\n   * @protected\n   */\n  deinit () {\n    return this::cmp.methods.deinit()\n  },\n  /**\n   * @return {Promise}\n   */\n  refresh () {\n    return this::cmp.methods.refresh()\n  },\n  /**\n   * @return {Object}\n   * @protected\n   */\n  getServices () {\n    const vm = this\n\n    return mergeDescriptors(this::cmp.methods.getServices(), {\n      get geometry () { return vm.$geometry },\n    })\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  mount () {\n    this.$geometryContainer && this.$geometryContainer.setGeometry(this)\n    this.subscribeAll()\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  unmount () {\n    this.unsubscribeAll()\n    this.$geometryContainer && this.$geometryContainer.setGeometry(undefined)\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  subscribeAll () {\n    this::subscribeToGeomChanges()\n  },\n}\n\nconst watch = {\n  coordinates (value) {\n    if (!this.$geometry || !this.$view) return\n\n    // compares in data projection\n    let isEq = isEqualGeom({\n      coordinates: value,\n      extent: boundingExtent(value),\n    }, {\n      coordinates: this.getCoordinates(),\n      extent: this.extent,\n    })\n\n    if (!isEq) {\n      this.setCoordinates(value)\n    }\n  },\n  resolvedDataProjection () {\n    if (this.$geometry) {\n      this.setupTransformFunctions()\n      this.setCoordinates(this.coordinates)\n    }\n  },\n}\n\nexport default {\n  mixins: [cmp, useMapCmp, projTransforms],\n  props,\n  computed,\n  watch,\n  methods,\n  stubVNode: {\n    empty () {\n      return this.$options.name\n    },\n  },\n  created () {\n    Object.defineProperties(this, {\n      /**\n       * @type {Geometry|undefined}\n       */\n      $geometry: {\n        enumerable: true,\n        get: () => this.$olObject,\n      },\n      $map: {\n        enumerable: true,\n        get: () => this.$services && this.$services.map,\n      },\n      $view: {\n        enumerable: true,\n        get: () => this.$services && this.$services.view,\n      },\n      $geometryContainer: {\n        enumerable: true,\n        get: () => this.$services && this.$services.geometryContainer,\n      },\n    })\n  },\n}\n\n/**\n * @return {void}\n * @private\n */\nfunction subscribeToGeomChanges () {\n  hasGeometry(this)\n\n  const ft = 100\n  const changes = observableFromOlEvent(\n    this.$geometry,\n    'change',\n    () => ({\n      coordinates: this.getCoordinates(),\n      extent: this.extent,\n    }),\n  ).pipe(\n    throttleTime(ft),\n    distinctUntilChanged(isEqualGeom),\n    mapObs(({ coordinates }) => ({\n      prop: 'coordinates',\n      value: coordinates,\n    })),\n  )\n\n  this.subscribeTo(changes, ({ prop, value }) => {\n    ++this.rev\n    this.$emit(`update:${prop}`, value)\n  })\n}\n\n/**\n * @param {{coordinates: number[], extent: number[]}} a\n * @param {{coordinates: number[], extent: number[]}} b\n * @returns {boolean}\n */\nfunction isEqualGeom (a, b) {\n  return isEqual(a.extent, b.extent)\n    ? isEqual(a.coordinates, b.coordinates)\n    : false\n}\n"],"names":["props","coordinates","type","Array","required","validator","val","length","computed","Error","extent","extentViewProj","resolvedDataProjection","extentToDataProj","rev","$geometry","getExtent","point","pointViewProj","pointToDataProj","findPointOnSurface","coordinatesViewProj","getCoordinates","methods","createOlObject","createGeometry","hasGeometry","toDataProj","setCoordinates","toViewProj","init","setupTransformFunctions","cmp","transform","transforms","viewProjection","deinit","refresh","getServices","vm","mergeDescriptors","geometry","mount","$geometryContainer","setGeometry","subscribeAll","unmount","unsubscribeAll","undefined","subscribeToGeomChanges","watch","value","$view","isEq","isEqualGeom","boundingExtent","mixins","useMapCmp","projTransforms","stubVNode","empty","$options","name","created","enumerable","get","$olObject","$map","$services","map","view","geometryContainer","ft","changes","observableFromOlEvent","pipe","throttleTime","distinctUntilChanged","mapObs","prop","subscribeTo","$emit","a","b","isEqual"],"mappings":"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"}