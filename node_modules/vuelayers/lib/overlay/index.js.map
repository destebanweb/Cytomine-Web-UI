{"version":3,"file":"index.js","sources":["src/component/overlay/overlay.vue?rollup-plugin-vue=script.js","src/component/overlay/overlay.vue","src/component/overlay/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n\nimport Overlay from 'ol/Overlay'\nimport { merge as mergeObs } from 'rxjs/observable'\nimport uuid from 'uuid/v4'\nimport olCmp from '../../mixin/ol-cmp'\nimport projTransforms from '../../mixin/proj-transforms'\nimport useMapCmp from '../../mixin/use-map-cmp'\nimport { OVERLAY_POSITIONING } from '../../ol-ext/consts'\nimport observableFromOlChangeEvent from '../../rx-ext/from-ol-change-event'\nimport { hasOverlay } from '../../util/assert'\nimport { isEqual, identity } from '../../util/minilo'\n\nconst props = {\n  id: {\n    type: [String, Number],\n    default: () => uuid(),\n  },\n  offset: {\n    type: Array,\n    default: () => [0, 0],\n    validator: value => value.length === 2,\n  },\n  /**\n   * Coordinates in the map view projection.\n   * @type {number[]}\n   */\n  position: {\n    type: Array,\n    validator: value => value.length === 2,\n    required: true,\n  },\n  positioning: {\n    type: String,\n    default: OVERLAY_POSITIONING.TOP_LEFT,\n    validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n  },\n  stopEvent: {\n    type: Boolean,\n    default: true,\n  },\n  insertFirst: {\n    type: Boolean,\n    default: true,\n  },\n  autoPan: {\n    type: Boolean,\n    default: false,\n  },\n  autoPanMargin: {\n    type: Number,\n    default: 20,\n  },\n  autoPanAnimation: Object,\n}\n\n/**\n * @vueComputed\n */\nconst computed = {\n  positionViewProj () {\n    if (this.rev && this.$overlay) {\n      return this.$overlay.getPosition()\n    }\n  },\n  positionDataProj () {\n    if (this.rev && this.$overlay) {\n      return this.pointToDataProj(this.$overlay.getPosition())\n    }\n  },\n  classes () {\n    return [\n      this.$options.name,\n      this.visible ? 'visible' : undefined,\n    ].filter(identity)\n  },\n}\n\n/**\n * @vueMethods\n */\nconst methods = /** @lends module:overlay/overlay# */{\n  /**\n   * @return {Overlay}\n   * @protected\n   */\n  createOlObject () {\n    return new Overlay({\n      id: this.id,\n      offset: this.offset,\n      position: this.pointToViewProj(this.position),\n      positioning: this.positioning,\n      stopEvent: this.stopEvent,\n      insertFirst: this.insertFirst,\n      autoPan: this.autoPan,\n      autoPanMargin: this.autoPanMargin,\n      autoPanAnimation: this.autoPanAnimation,\n    })\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  mount () {\n    hasOverlay(this)\n\n    this.$overlay.setElement(this.$el)\n    this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n    // reset position to trigger panIntoView\n    this.$nextTick(() => {\n      this.$overlay.setPosition(this.positionViewProj.slice())\n      this.visible = true\n    })\n    this.subscribeAll()\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  unmount () {\n    hasOverlay(this)\n\n    this.unsubscribeAll()\n    this.$overlay.setElement(undefined)\n    this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n    this.visible = false\n  },\n  /**\n   * @return {void}\n   * @protected\n   */\n  subscribeAll () {\n    this::subscribeToOverlayChanges()\n  },\n}\n\nconst watch = {\n  offset (value) {\n    if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n      this.$overlay.setOffset(value)\n    }\n  },\n  position (value) {\n    value = this.pointToViewProj(value)\n    if (this.$overlay && !isEqual(value, this.positionViewProj)) {\n      this.$overlay.setPosition(value)\n    }\n  },\n  positioning (value) {\n    if (this.$overlay && value !== this.$overlay.getPositioning()) {\n      this.$overlay.setPositioning(value)\n    }\n  },\n  resolvedDataProjection () {\n    if (this.$overlay) {\n      this.$overlay.setPosition(this.pointToViewProj(this.position))\n    }\n  },\n}\n\n/**\n * @alias module:overlay/overlay\n * @title vl-overlay\n * @vueProto\n */\nexport default {\n  name: 'vl-overlay',\n  mixins: [olCmp, useMapCmp, projTransforms],\n  props,\n  computed,\n  methods,\n  watch,\n  created () {\n    Object.defineProperties(this, /** @lends module:overlay/overlay# */{\n      /**\n       * @type {Overlay|undefined}\n       */\n      $overlay: {\n        enumerable: true,\n        get: () => this.$olObject,\n      },\n      $map: {\n        enumerable: true,\n        get: () => this.$services && this.$services.map,\n      },\n      $view: {\n        enumerable: true,\n        get: () => this.$services && this.$services.view,\n      },\n      $overlaysContainer: {\n        enumerable: true,\n        get: () => this.$services && this.$services.overlaysContainer,\n      },\n    })\n  },\n  data () {\n    return {\n      visible: false,\n    }\n  },\n}\n\n/**\n * @return {void}\n * @private\n */\nfunction subscribeToOverlayChanges () {\n  hasOverlay(this)\n\n  const ft = 1000 / 60\n  const changes = mergeObs(\n    observableFromOlChangeEvent(this.$overlay, 'position', true, ft,\n      () => this.pointToDataProj(this.$overlay.getPosition())),\n    observableFromOlChangeEvent(this.$overlay, [\n      'offset',\n      'positioning',\n    ], true, ft),\n  )\n\n  this.subscribeTo(changes, ({ prop, value }) => {\n    ++this.rev\n    this.$emit(`update:${prop}`, value)\n  })\n}\n","<template>\n  <div :id=\"[$options.name, id].join('-')\" :class=\"classes\">\n    <slot :id=\"id\" :position=\"position\" :offset=\"offset\" :positioning=\"positioning\"/>\n  </div>\n</template>\n\n<script>\n  import Overlay from 'ol/Overlay'\n  import { merge as mergeObs } from 'rxjs/observable'\n  import uuid from 'uuid/v4'\n  import olCmp from '../../mixin/ol-cmp'\n  import projTransforms from '../../mixin/proj-transforms'\n  import useMapCmp from '../../mixin/use-map-cmp'\n  import { OVERLAY_POSITIONING } from '../../ol-ext/consts'\n  import observableFromOlChangeEvent from '../../rx-ext/from-ol-change-event'\n  import { hasOverlay } from '../../util/assert'\n  import { isEqual, identity } from '../../util/minilo'\n\n  const props = {\n    id: {\n      type: [String, Number],\n      default: () => uuid(),\n    },\n    offset: {\n      type: Array,\n      default: () => [0, 0],\n      validator: value => value.length === 2,\n    },\n    /**\n     * Coordinates in the map view projection.\n     * @type {number[]}\n     */\n    position: {\n      type: Array,\n      validator: value => value.length === 2,\n      required: true,\n    },\n    positioning: {\n      type: String,\n      default: OVERLAY_POSITIONING.TOP_LEFT,\n      validator: value => Object.values(OVERLAY_POSITIONING).includes(value),\n    },\n    stopEvent: {\n      type: Boolean,\n      default: true,\n    },\n    insertFirst: {\n      type: Boolean,\n      default: true,\n    },\n    autoPan: {\n      type: Boolean,\n      default: false,\n    },\n    autoPanMargin: {\n      type: Number,\n      default: 20,\n    },\n    autoPanAnimation: Object,\n  }\n\n  /**\n   * @vueComputed\n   */\n  const computed = {\n    positionViewProj () {\n      if (this.rev && this.$overlay) {\n        return this.$overlay.getPosition()\n      }\n    },\n    positionDataProj () {\n      if (this.rev && this.$overlay) {\n        return this.pointToDataProj(this.$overlay.getPosition())\n      }\n    },\n    classes () {\n      return [\n        this.$options.name,\n        this.visible ? 'visible' : undefined,\n      ].filter(identity)\n    },\n  }\n\n  /**\n   * @vueMethods\n   */\n  const methods = /** @lends module:overlay/overlay# */{\n    /**\n     * @return {Overlay}\n     * @protected\n     */\n    createOlObject () {\n      return new Overlay({\n        id: this.id,\n        offset: this.offset,\n        position: this.pointToViewProj(this.position),\n        positioning: this.positioning,\n        stopEvent: this.stopEvent,\n        insertFirst: this.insertFirst,\n        autoPan: this.autoPan,\n        autoPanMargin: this.autoPanMargin,\n        autoPanAnimation: this.autoPanAnimation,\n      })\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    mount () {\n      hasOverlay(this)\n\n      this.$overlay.setElement(this.$el)\n      this.$overlaysContainer && this.$overlaysContainer.addOverlay(this.$overlay)\n      // reset position to trigger panIntoView\n      this.$nextTick(() => {\n        this.$overlay.setPosition(this.positionViewProj.slice())\n        this.visible = true\n      })\n      this.subscribeAll()\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    unmount () {\n      hasOverlay(this)\n\n      this.unsubscribeAll()\n      this.$overlay.setElement(undefined)\n      this.$overlaysContainer && this.$overlaysContainer.removeOverlay(this.$overlay)\n      this.visible = false\n    },\n    /**\n     * @return {void}\n     * @protected\n     */\n    subscribeAll () {\n      this::subscribeToOverlayChanges()\n    },\n  }\n\n  const watch = {\n    offset (value) {\n      if (this.$overlay && !isEqual(value, this.$overlay.getOffset())) {\n        this.$overlay.setOffset(value)\n      }\n    },\n    position (value) {\n      value = this.pointToViewProj(value)\n      if (this.$overlay && !isEqual(value, this.positionViewProj)) {\n        this.$overlay.setPosition(value)\n      }\n    },\n    positioning (value) {\n      if (this.$overlay && value !== this.$overlay.getPositioning()) {\n        this.$overlay.setPositioning(value)\n      }\n    },\n    resolvedDataProjection () {\n      if (this.$overlay) {\n        this.$overlay.setPosition(this.pointToViewProj(this.position))\n      }\n    },\n  }\n\n  /**\n   * @alias module:overlay/overlay\n   * @title vl-overlay\n   * @vueProto\n   */\n  export default {\n    name: 'vl-overlay',\n    mixins: [olCmp, useMapCmp, projTransforms],\n    props,\n    computed,\n    methods,\n    watch,\n    created () {\n      Object.defineProperties(this, /** @lends module:overlay/overlay# */{\n        /**\n         * @type {Overlay|undefined}\n         */\n        $overlay: {\n          enumerable: true,\n          get: () => this.$olObject,\n        },\n        $map: {\n          enumerable: true,\n          get: () => this.$services && this.$services.map,\n        },\n        $view: {\n          enumerable: true,\n          get: () => this.$services && this.$services.view,\n        },\n        $overlaysContainer: {\n          enumerable: true,\n          get: () => this.$services && this.$services.overlaysContainer,\n        },\n      })\n    },\n    data () {\n      return {\n        visible: false,\n      }\n    },\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  function subscribeToOverlayChanges () {\n    hasOverlay(this)\n\n    const ft = 1000 / 60\n    const changes = mergeObs(\n      observableFromOlChangeEvent(this.$overlay, 'position', true, ft,\n        () => this.pointToDataProj(this.$overlay.getPosition())),\n      observableFromOlChangeEvent(this.$overlay, [\n        'offset',\n        'positioning',\n      ], true, ft),\n    )\n\n    this.subscribeTo(changes, ({ prop, value }) => {\n      ++this.rev\n      this.$emit(`update:${prop}`, value)\n    })\n  }\n</script>\n","import { pick } from '../../util/minilo'\nimport Overlay from './overlay.vue'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  options = pick(options, 'dataProjection')\n  Object.assign(Overlay, options)\n\n  Vue.component(Overlay.name, Overlay)\n}\n\nexport default plugin\n\nexport {\n  Overlay,\n  plugin as install,\n}\n"],"names":["props","id","type","String","Number","default","uuid","offset","Array","validator","value","length","position","required","positioning","OVERLAY_POSITIONING","TOP_LEFT","includes","stopEvent","Boolean","insertFirst","autoPan","autoPanMargin","autoPanAnimation","Object","computed","positionViewProj","rev","$overlay","getPosition","positionDataProj","pointToDataProj","classes","$options","name","visible","undefined","filter","identity","methods","createOlObject","Overlay","pointToViewProj","mount","hasOverlay","setElement","$el","$overlaysContainer","addOverlay","$nextTick","setPosition","slice","subscribeAll","unmount","unsubscribeAll","removeOverlay","subscribeToOverlayChanges","watch","isEqual","getOffset","setOffset","getPositioning","setPositioning","resolvedDataProjection","mixins","olCmp","useMapCmp","projTransforms","created","enumerable","get","$olObject","$map","$services","map","$view","view","overlaysContainer","data","ft","changes","mergeObs","observableFromOlChangeEvent","subscribeTo","prop","$emit","plugin","Vue","options","installed","pick","component"],"mappings":"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"}